#meta developer: @LolDecMods

import asyncio
from hikkatl import types
from telethon import functions, events

from .. import loader, utils


@loader.tds
class SendMessageModule(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ –≤ –±–æ—Ç–µ @Aniversecard_bot"""

    strings = {"name": "AniverseAuto"}

    def __init__(self):
        self.running = False
        self.success_message = "<b>üèó–£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ<b>"
        self.already_running_message = "‚ùåÔ∏è–£–∂–µ –∑–∞–ø—É—â–µ–Ω–æ"

    @loader.unrestricted
    async def runancmd(self, message: types.Message):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è '–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É' –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞"""
        if self.running:
            await utils.answer(message, self.already_running_message)
            return
        self.running = True

        await utils.answer(message, self.success_message)

        while self.running:
            await message.client(functions.messages.SendMessageRequest(
                peer='aniversecard_bot',
                message='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'
            ))

            # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞
            response = await self._wait_for_response(message.client, 'aniversecard_bot', ['ü™™ –¢–≤–æ–π –Ω–∏–∫:', 'üÜî –¢–≤–æ–π –∞–π–¥–∏:', 'ü•° –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É—Ç–æ–∫:'])
            if response and 'ü•° –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É—Ç–æ–∫:' in response.message:
                try:
                    num_of_spins = int(response.message.split("ü•° –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É—Ç–æ–∫:")[1].strip())
                except ValueError:
                    num_of_spins = 0

                for _ in range(num_of_spins):
                    await message.client(functions.messages.SendMessageRequest(
                        peer='aniversecard_bot',
                        message='–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É'
                    ))
                    await asyncio.sleep(10)

            await asyncio.sleep(4 * 60 * 60)

    @loader.unrestricted
    async def stopnancmd(self, message: types.Message):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è '–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É'"""
        if not self.running:
            await utils.answer(message, "‚ùåÔ∏è–û—Ç–ø—Ä–∞–≤–∫–∞ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            return
        self.running = False
        await utils.answer(message, "‚úîÔ∏è–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

    @loader.unrestricted
    async def command(self, message: types.Message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ '–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @aniversecard_bot"""
        await message.client(functions.messages.SendMessageRequest(
            peer='aniversecard_bot',
            message='–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É'
        ))

    async def _wait_for_response(self, client, peer, expected_messages):
        async for event in client.iter_messages(peer):
            if event.message in expected_messages:
                return event
